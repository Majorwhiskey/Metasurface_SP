clear all;
clc;
close all;

% Rectangular antenna/element array for metasurface

% Parameters
Nx = 4; % Number of elements in the x-dimension
Ny = 4; % Number of elements in the y-dimension
d = 0.5; % Distance between elements in wavelengths
lambda = 1; % Wavelength
k = 2 * pi / lambda; % Wave number
fs = 1e3; % Sampling frequency
t = 0:1/fs:1; % Time vector
A = 1; % Amplitude of the incoming signal

% Create grid of element positions
[x, y] = meshgrid(0:Nx-1, 0:Ny-1);
x = x * d;
y = y * d;

% Generate the incoming signal (a simple sinusoidal wave in this example)
signal = A * cos(2 * pi * 100 * t);  % Signal as a cosine wave at 100 Hz

% Initialize the received signal matrix
received_signal_data = []; % Store received signal data

% Total number of iterations (reduced dataset size)
snr_values = -5:5; % SNR values
theta_values = -90:15:90; % Reduce steps for theta
phi_values = -90:15:90; % Reduce steps for phi
total_iterations = length(snr_values) * length(theta_values) * length(phi_values);
current_iteration = 0;

% Loop over different SNR, theta, phi values
for SNR = snr_values
    for theta = theta_values
        for phi = phi_values
            % Update progress display
            current_iteration = current_iteration + 1;
            disp(['Processing: ', num2str(current_iteration), ' of ', num2str(total_iterations)]);
            
            % Calculate the received signal for this combination of parameters
            received_signal = calculate_signal(SNR, theta, phi, Nx, Ny, x, y, signal, k, t);
            
            % Store the received signal data
            received_signal_data = [received_signal_data; SNR, theta, phi, received_signal];
        end
    end
end

% Function to calculate the signal based on SNR, theta, and phi
function signal_out = calculate_signal(SNR, theta, phi, Nx, Ny, x, y, signal, k, ~)
    % Calculate Array Factor
    Array_factor = ArrayFactor(theta, phi, Nx, Ny, x, y, k);
    
    % Ensure Array_factor is a scalar for multiplication with the signal
    received_signal = Array_factor * signal;  % Multiply by signal
    
    % Adjust received signal by the SNR (simple model)
    noise = (1 / 10^(SNR / 10)) * randn(size(received_signal));  % Add noise based on SNR
    signal_out = received_signal + noise;  % Add noise to the signal
end

% Function to calculate the Array Factor
function Array_factor = ArrayFactor(theta, phi, Nx, Ny, x, y, k)
    % Initialize Array Factor
    Array_factor = 0;
    
    % Calculate the array factor based on the positions of the elements
    for i = 1:Nx
        for j = 1:Ny
            % Calculate the phase shift for element (i,j) due to its position
            phase_shift = k * (x(i,j) * sin(deg2rad(theta)) * cos(deg2rad(phi)) + ...
                               y(i,j) * sin(deg2rad(theta)) * sin(deg2rad(phi)));
            
            % Add the contribution from this element to the array factor
            Array_factor = Array_factor + exp(1j * phase_shift);
        end
    end
end

% Separate inputs and outputs (swapped for ANN)
outputs = received_signal_data(:, 1:3)'; % Outputs: SNR, theta, phi (transpose for ANN format)
inputs = received_signal_data(:, 4:end)'; % Inputs: received signals (transpose for ANN format)

% Process complex inputs
inputs_real = real(inputs);
inputs_imag = imag(inputs);
inputs_processed = [inputs_real; inputs_imag]; % Combine real and imaginary parts

% Define the network structure
hiddenLayerSize = 200; % Reduced number of neurons
net = feedforwardnet(hiddenLayerSize);

% Configure training options
net.trainFcn = 'trainrp'; % Resilient Backpropagation
net.performFcn = 'mse'; % Mean Squared Error performance

% Train the ANN in smaller batches
batchSize = 1000; % Number of samples per batch
numBatches = ceil(size(inputs_processed, 2) / batchSize);

for batch = 1:numBatches
    % Extract batch data
    batchStart = (batch - 1) * batchSize + 1;
    batchEnd = min(batch * batchSize, size(inputs_processed, 2));
    
    batchInputs = inputs_processed(:, batchStart:batchEnd);
    batchOutputs = outputs(:, batchStart:batchEnd);
    
    % Train on the current batch
    [net, tr] = train(net, batchInputs, batchOutputs);
end

% Test the ANN
predicted_outputs = net(inputs_processed); % Predict outputs

% Evaluate performance
performance = perform(net, outputs, predicted_outputs);

% Visualize Results
figure;
plotperform(tr); % Performance plot
figure;
plotregression(outputs, predicted_outputs); % Regression plot

% Save the trained network
save('trained_ANN.mat', 'net');



%remove snr
%jumble the values
%data to be taken to be 80%
